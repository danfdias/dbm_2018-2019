/************************************************************************************************************************************/
/*************************************************** BackOffice Rotas **********************************************************/
/************************************************************************************************************************************/
var express = require('express');
var bodyParser = require('body-parser');
var backofficeRouter = express.Router();

{{#controllers}}
/************************************************************************************************************************************/
/*************************************************** {{controllerTitle}} **********************************************************/
/************************************************************************************************************************************/

var {{controllerTitleLower}} = require('../Models/{{controllerTitle}}.js');
var {{controllerTitleLower}}Schema = require('../Models/{{controllerTitle}}-schema.js');

/**
 * Rota que faz render do ficheiro list.mustache com a informação devolvida pela função
 * all da classe {{controllerTitle}}
 *
 */
backofficeRouter.get('/{{controllerTitle}}',function(req,res) {    
    {{controllerTitleLower}}.all(function (rows) {
        res.render('list', {
            title: '{{controllerTitle}}',
            cssPath: [
                { css: "../css/default.css"},
                { css: "../css/nav.css"},
                { css: "../css/all.css"},
                { css: "../css/tops.css"}
            ],
            rows: rows.map(obj => {
                return {
                    properties: Object.keys(obj).map(key => {
                        return {
                            name: key,
                            value: obj[key]
                        }
                    }),
                    actions: [{
                        label: '',
                        link: './{{controllerTitle}}/Detalhe/' + obj.id,
                        image: {
                            src: '../Images/read.png'
                        },
                        tooltip: 'Ver Detalhes'
                    }, {
                        label: '',
                        link: './{{controllerTitle}}/Editar/' + obj.id,
                        image: {
                            src: '../Images/edit.png'
                        },
                        tooltip: 'Editar'
                    }, {
                        label: '',
                        link: '#',
                        image: {
                            src: '../Images/delete.png'
                        },
                        tooltip: 'Apagar',
                        events: [{
                            name: "onclick",
                            function: "apagar",
                            args: obj.id
                        }]

                    }]
                }
            }),
            columns: Object.keys(new {{controllerTitleLower}}()).map(key => {
                return {
                    name: capitalizeFirstLetter(key)
                };
            }),
            insert: true
        });
    });
});

/**
 * Rota que faz render do ficheiro details.mustache com a informação devolvida pela função
 * get da classe {{controllerTitle}}
 *
 */
backofficeRouter.get('/{{controllerTitle}}/Detalhe/:id', function (req, res) {
    {{controllerTitleLower}}.get(req.params.id, function (row) {
        res.render('details', {
            properties: function () {
                var element = row[0];
                var allProps = Object.getOwnPropertyNames(element);
                var validProps = [];
                allProps.forEach(function (prop) {
                    if ({{controllerTitleLower}}Schema.properties.hasOwnProperty(prop)) {
                        if(prop.toString() != "image"){
                            validProps.push({
                                name: capitalizeFirstLetter(prop),
                                value: element[prop]
                            });
                        }
                    }
                });
                return validProps;
            },
            cssPath: [
                { css: "../../../css/default.css"},
                { css: "../../../css/nav.css"},
                { css: "../../../css/all.css"},
                { css: "../../../css/tops.css"}
            ],
            imagePath: "../../../" + row[0].image,
            title: "{{controllerTitle}}"
        });
    });
});

/**
 * Rota que faz render do ficheiro form1.mustache que consite no fomulario de inserção de um elemento
 * to tipo {{controllerTitle}}
 *
 */
backofficeRouter.get('/{{controllerTitle}}/Inserir',function(req,res) {
   var props =  Object.getOwnPropertyNames(new {{controllerTitleLower}}()).map(key => {
                        if(Object.keys({{controllerTitleLower}}Schema.properties).includes(key)){
                        var typeAux = {{controllerTitleLower}}Schema.properties[key].type;
                        if(typeAux === 'integer'){
                            typeAux = 'number';
                        }else if(typeAux === 'string')typeAux = 'text';
                        var obj = {
                            name: capitalizeFirstLetter(key),
                            required : {{controllerTitleLower}}Schema.required.includes(key),
                            type: typeAux,
                            min : {{controllerTitleLower}}Schema.properties[key].minimum,
                            max : {{controllerTitleLower}}Schema.properties[key].maximum
                        }        

                        return obj;
                        }
            });
    var propsaux = [];
    for(var i = 0;i<props.length;i++){
        if(props[i] !== void 0 && props[i].name.substr(props[i].name.length - 2) !== "id"){
            propsaux.push(props[i]);
        }
    }

    res.render('form1', {
            title: '{{controllerTitle}}',
            cssPath: [
                { css: "../../../css/default.css"},
                { css: "../../../css/nav.css"},
                { css: "../../../css/all.css"},
                { css: "../../../css/tops.css"}
            ],
            properties: propsaux            
    });
});

/**
 * Rota que faz render do ficheiro form2.mustache que consite no fomulario de editar um elemento
 * to tipo {{controllerTitle}}
 *
 */
backofficeRouter.get('/{{controllerTitle}}/Editar/:id',function(req,res) {
    {{controllerTitleLower}}.get(req.params.id,function (row) {
        var element = row[0];
    var props =  Object.getOwnPropertyNames(new {{controllerTitleLower}}()).map(key => {
                        if(Object.keys({{controllerTitleLower}}Schema.properties).includes(key)){
                        var typeAux = {{controllerTitleLower}}Schema.properties[key].type;
                        if(typeAux === 'integer'){
                            typeAux = 'number';
                        }else if(typeAux === 'string')typeAux = 'text';
                        var obj = {
                            name: capitalizeFirstLetter(key),
                            val : element[key],
                            required : {{controllerTitleLower}}Schema.required.includes(key),
                            type: typeAux
                        }        

                        return obj;
                        }
            });
    var propsaux = [];
    for(var i = 0;i<props.length;i++){
        if(props[i] !== void 0 && props[i].name.substr(props[i].name.length - 2) !== "id"){
            propsaux.push(props[i]);
        }
    }

    res.render('form2', {
            title: '{{controllerTitle}}',
            cssPath: [
                { css: "../../../css/default.css"},
                { css: "../../../css/nav.css"},
                { css: "../../../css/all.css"},
                { css: "../../../css/tops.css"}
            ],
            idClass: req.params.id,
            properties: propsaux
            }
        )
    });
});

{{/controllers}}

/**
    Funcao que dada uma string retorna a mesma com a primeira letra em CapitalCase
*/
function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}

module.exports = backofficeRouter;