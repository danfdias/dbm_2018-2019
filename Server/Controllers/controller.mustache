var express = require('express');
var router = express.Router();

/**
* Método que faz o mapeamento entre um objeto retornado pelo módulo sqlite num objeto de uma classe criada
* @param {any} object Representa o objeto retornado pela query à abse de dados
* @param {any} type Representa o tipo de objeto que se pretende converter
* @returns Devolve um objeto do tipo 'type' com o conteúdo que está no objeto 'object'
*/
function mapping(object, type) {
    var obj = new type();
    Object.keys(object).forEach(function (value) {
        //Se o objeto possuir o atributo que se está a verificar então recebe o valor retornado da query da base de dados
        if (obj.hasOwnProperty(value.toLowerCase())){
            obj[value.toLowerCase()] = object[value];
        }
    });
    return obj;
}

{{#controllers}}
/************************************************************************************************************************************/
/**************************************************** {{controllerTitle}} ***********************************************************/
/************************************************************************************************************************************/

var {{controllerTitleLower}} = require('../Models/{{controllerTitle}}.js');

/**
* rota que chama a funcao save para fazer um insert a tabela {{controllerTitle}}
*/
router.post('/{{controllerTitle}}', function (req, res) {
    mapping(req.body, {{controllerTitleLower}}).save(function(){
        res.send('Registo Inserido');
        }); //converte o objeto retornado no corpo do pedido num objeto do tipo Aluno
});

/**
* rota que chama a funcao all que faz um select de toda a informacao numa tabela {{controllerTitle}}
*/
router.get('/{{controllerTitle}}', function (req, res) {
    {{controllerTitleLower}}.all(function (rows) { //função de callback que quando for retornado os dados na base de dados, os mesmos serão enviados em json
        res.json(rows);
    });
});

/**
* rota que chama a funcao get que faz um select de uma determinada coluna a tabela {{controllerTitle}} 
*/
router.get('/{{controllerTitle}}/:id', function (req, res) {
    {{controllerTitleLower}}.get(req.params.id, function (row) {
        res.json(row);
    });
});

/**
* rota que chama a funcao save para fazer um update de uma coluna a tabela {{controllerTitle}}
*/
router.post('/{{controllerTitle}}/:id', function (req, res) { 
    var obj = mapping(req.body, {{controllerTitleLower}});
    obj.id = req.params.id; //no caso de ir no corpo da mensagem tem de se fazer a atribuição do id após o mapeamento do objeto
    obj.save(function (err) { //devolve true em caso de ter feito o save sem qualquer erro
        res.redirect("http://localhost:8082/backoffice/{{controllerTitle}}");
    });
});

/**
* rota que chama a funcao delete que faz um delete de uma coluna da tabela {{controllerTitle}}
*/
router.delete('/{{controllerTitle}}/:id', function (req, res) {
    {{controllerTitleLower}}.delete(parseInt(req.params.id), function () {
        res.json("Registo Eliminado");
    });
});

{{/controllers}}
module.exports = router;